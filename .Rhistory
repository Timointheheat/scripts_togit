dplyr::select(pp, ha, Minutes, timestamp, T_core_chest, T_core_chest_new, T_skin_chest,
T_core_hand, T_core_hand_new, T_skin_hand, HR_core)
longformat_CORE <- rbind(longformat_CORE, averaged_CORE)
}
}
View(longformat_CORE)
filename_chest
file.exists(paste(here("data/CORE_rawdata_newAlgorithm/newnew/chest/"), filename_chest, sep = ""))
paste(here("data/CORE_rawdata_newAlgorithm/newnew/chest/"), filename_chest, sep = "")
# Step 2: create empty longformat ----
longformat_CORE <- data.frame()
for (participant in pp_value) {
for (test in 1:NROW(testname)){
## Empty dataframes to be sure
averaged_hand <- NULL
averaged_chest <- NULL
averaged_CORE <- NULL
temp <- NULL
temp2 <- NULL
filtered <- NULL
filtered2 <- NULL
## Create dynamic file names
filename_chest <- paste("/p", participant, "_", testname[test], "_CORE_chest", ".csv", sep = "")
filename_hand <- paste("/p", participant, "_", testname[test], "_CORE_hand", ".csv", sep = "")
## CHEST: Check if file exists & do all subsetting
if(file.exists(paste(here("data/CORE_rawdata_newAlgorithm/newnew/chest/"), filename_chest, sep = ""))) {
### Download data + extract right columns
temp <- read.csv(paste(here("data/CORE_rawdata_newAlgorithm/newnew/chest/"),
filename_chest, sep = "")) %>%
rename(Date.time = "time..UTC.OFS..0100.",
T_core = "cbt..mC.",
T_core_new = "CBT_NEW_MODEL..mC.",
T_skin = "temp_a0..mC.",
HR = "hr") %>%
mutate(Date.time = sub("\\..*", "", Date.time))%>%                          # Delete unexpected ".11" etc
mutate(date = as.POSIXct(substr(Date.time, 1, 10), format = "%Y-%m-%d"),
time = as_hms(substr(Date.time, 12, 19))) %>%                        # Convert to useable timestamps
mutate(T_core_chest = T_core/1000,
T_core_chest_new = T_core_new/1000,
T_skin_chest = T_skin / 1000,
HR = as.numeric(HR)) %>%                                   # Convert to Tc
dplyr::select(time, T_core_chest, T_core_chest_new, T_skin_chest, HR)
### Filter only needed rows by start/ end times
times <- scoreform_HA[scoreform_HA$pp == participant & scoreform_HA$nmbr_test == test,] %>%
mutate(time_start_45 = as_hms(substr(time_start_45, 12, 19)),
time_end_ch = as_hms(substr(time_end_ch, 12, 19))) %>%
dplyr::select(pp, nmbr_test, time_start_45, time_end_ch)
filtered <- temp %>%
filter(time >= times$time_start_45 & time <= times$time_end_ch)
### average over 1 minute
averaged_chest <- filtered %>%
mutate(timestamp = as_hms(round(as.numeric(time) / 60) * 60))%>%              # Get times towards closes minutes
group_by(timestamp) %>%
summarise(across(c(T_core_chest, T_core_chest_new, T_skin_chest, HR), mean, na.rm = TRUE)) %>%            # Calculate mean for each minute
ungroup() %>%
mutate(Minutes = as.numeric((timestamp - timestamp[1])/60),
HR = round(HR)) %>%
dplyr::select(Minutes, timestamp, T_core_chest, T_core_chest_new, T_skin_chest, HR)
} else {
### If file does not exist, create an empty dataframe
averaged_chest <- data.frame(Minutes = c(1:166), timestamp = rep(NA, 166), T_core_chest = rep(NA, 166),
T_core_chest_new = rep(NA, 166), T_skin_chest = rep(NA, 166), HR = rep(NA, 166))
}
## HAND: Check if file exists & do all subsetting
if(file.exists(paste(here("data/CORE_rawdata_newAlgorithm/newnew/wrist/"), filename_hand, sep = ""))) {
### Download data + extract right columns
temp2 <- read.csv(paste(here("data/CORE_rawdata_newAlgorithm/newnew/wrist/"),
filename_hand, sep = "")) %>%
rename(Date.time = "time..UTC.OFS..0100.",
T_core = "cbt..mC.",
T_core_new = "CBT_NEW_MODEL..mC.",
T_skin = "temp_a0..mC.",
HR = "hr") %>%
mutate(Date.time = sub("\\..*", "", Date.time))%>%                          # Delete unexpected ".11" etc
mutate(date = as.POSIXct(substr(Date.time, 1, 10), format = "%Y-%m-%d"),
time = as_hms(substr(Date.time, 12, 19))) %>%                        # Convert to useable timestamps
mutate(T_core_hand = T_core/1000,
T_core_hand_new = T_core_new/1000,
T_skin_hand = T_skin / 1000,
HR = as.numeric(HR)) %>%                                   # Convert to Tc
dplyr::select(time, T_core_hand, T_core_hand_new, T_skin_hand, HR)
### Filter only needed rows by start/ end times
times2 <- scoreform_HA[scoreform_HA$pp == participant & scoreform_HA$nmbr_test == test,] %>%
mutate(time_start_45 = as_hms(substr(time_start_45, 12, 19)),
time_end_ch = as_hms(substr(time_end_ch, 12, 19))) %>%
dplyr::select(pp, nmbr_test, time_start_45, time_end_ch)
filtered2 <- temp2%>%
filter(time >= times2$time_start_45 & time <= times2$time_end_ch)
### average over 1 minute
averaged_hand <- filtered2 %>%
mutate(timestamp = as_hms(round(as.numeric(time) / 60) * 60))%>%              # Get times towards closes minutes
group_by(timestamp) %>%
summarise(across(c(T_core_hand, T_core_hand_new, T_skin_hand), mean, na.rm = TRUE)) %>%            # Calculate mean for each minute
ungroup() %>%
mutate(Minutes = as.numeric((timestamp - timestamp[1])/60)) %>%
dplyr::select(Minutes, timestamp, T_core_hand, T_core_hand_new, T_skin_hand)
} else {
### If file does not exist, create an empty dataframe
averaged_hand <- data.frame(Minutes = c(1:166), timestamp = rep(NA, 166), T_core_hand = rep(NA, 166),
T_core_hand_new = rep(NA, 166), T_skin_hand = rep(NA, 166))
}
## Combine Hand and Chest
averaged_CORE <- averaged_chest %>%
left_join(averaged_hand, by = "Minutes") %>%
mutate(pp = participant,
ha = test,
HR_core = HR,
timestamp = timestamp.x) %>%
dplyr::select(pp, ha, Minutes, timestamp, T_core_chest, T_core_chest_new, T_skin_chest,
T_core_hand, T_core_hand_new, T_skin_hand, HR_core)
longformat_CORE <- rbind(longformat_CORE, averaged_CORE)
}
}
View(longformat_CORE)
plot(longformat_CORE$Minutes, longformat_CORE$T_core_chest_new)
plot(longformat_CORE$Minutes, longformat_CORE$T_core_chest_new[longformat_CORE$T_core_chest_new > 30])
plot(longformat_CORE$Minutes[longformat_CORE$T_core_chest_new > 30], longformat_CORE$T_core_chest_new[longformat_CORE$T_core_chest_new > 30])
# Step 4: save as excel----
write.xlsx(longformat_CORE,
file = file.path(paste0(here("data_output"),
"/HA_longformat_CORE_18122024.xlsx")))
# Step 4: save as excel----
write.xlsx(longformat_CORE,
file = file.path(paste0(here("data/data_output"),
"/HA_longformat_CORE_18122024.xlsx")))
# STEP 1) Get cleaned DL data -----
longformat_DL <- read_excel(paste0(here("data/data_output"), "/HA_longformat_DL.xlsx")) %>%
dplyr::select(!Time)
# STEP 2) Get cleaned IB data ----
longformat_Tsk <- read_excel(paste0(here("data/data_output"), "/HA_longformat_Tsk.xlsx")) %>%
mutate(Minutes = Minutes -1) %>%                    # Reduce by 1 minute as this starts at t = 1 instead of t = 0
mutate(ha = hst) %>%
dplyr::select(!c(hst, Date.Time, time))
# STEP 3) Get RAW CORE data ----
longformat_CORE <- read_excel(paste0(here("data/data_output"), "/HA_longformat_CORE.xlsx"))
# STEP 3) Get RAW CORE data ----
longformat_CORE <- read_excel(paste0(here("data/data_output"), "/HA_longformat_CORE_18122024.xlsx"))
longformat_Polar <- read_excel(paste0(here("data/data_output"), "/HA_longformat_HR.xlsx")) %>%
rename(HR_polar = HR)
# STEP 5) Merge all into 1 Masterfile----
Masterfile <- longformat_CORE %>%
left_join(longformat_Tsk, by = c("pp","ha", "Minutes")) %>%
left_join(longformat_DL, by = c("pp","ha", "Minutes")) %>%
left_join(longformat_Polar, by = c("pp","ha", "Minutes")) %>%
rename(Trec = mean_Trec,
RH = mean_RH_vaisalah,
Tdb = mean_T_vaisalah,
T_core_torso = T_core_chest,
T_core_torso_new = T_core_chest_new,
T_skin_torso = T_skin_chest)
# STEP 6) Calculate Tbody----
Masterfile <- Masterfile %>%
mutate(Tbody = 0.8 * Trec + 0.2 * Tsk_average,
Tbody_core_torso = 0.8 * T_core_torso + 0.2 * T_skin_torso,
Tbody_core_hand = 0.8 * T_core_hand + 0.2 * T_skin_hand,
Tbody_core_torso_new = 0.8 * T_core_torso_new + 0.2 * T_skin_torso,
Tbody_core_hand_new = 0.8 * T_core_hand_new + 0.2 * T_skin_hand)
# STEp 8) save masterfile ----
write.xlsx(Masterfile,
file = file.path(paste0(here("data/data_output"),
"/HA_Masterfile_raw_18122024.xlsx")))
library(dplyr)
library(here)
library(readxl)
library(ggpubr)
library(tidyr)
library(openxlsx)
library(stringr)
library(hms)
# STEP ) Get Masterfile----
Masterfile <- read_excel(paste0(here("data_output"), "/HA_Masterfile.xlsx"))
library(dplyr)
library(here)
library(readxl)
library(ggpubr)
library(tidyr)
library(openxlsx)
library(stringr)
library(hms)
library(lubridate)
# Step 1: get scoreform with start/ end times ----
scoreform_HA <- read_excel(here("data/Scoreform_excel_HA.xlsx"), na = c("NA", "", "_", "-")) %>%
dplyr::select(pp, nmbr_test, time_start_15, time_start_TDextra, tm_start, tm_end) %>%
mutate(time_start_45 = time_start_15,
time_end_45 = time_start_15 + minutes(45),                                                      # End time of 45 min block
time_start_ch = case_when(
is.na(tm_start) | tm_start < time_start_TDextra ~ time_end_45 + minutes(5),
TRUE ~ time_start_TDextra),                                                                  # Start CH depends on start tm phase and TD phase
time_start_ch = coalesce(time_start_ch, time_end_45 + minutes(5)),                             # If start_ch ends up being NA, replace by time_end_45+5 minutes
time_end_ch = tm_end)
# Step 2: create empty longformat ----
longformat_CORE <- data.frame()
# Step 3: add each file to longformat_CORE ----
pp_value <- c(1:25)
testname <- c("ha1", "ha2", "ha3", "ha4", "ha5", "ha6", "ha7", "ha8", "ha9")
## Empty dataframes to be sure
averaged_hand <- NULL
averaged_chest <- NULL
averaged_CORE <- NULL
temp <- NULL
temp2 <- NULL
filtered <- NULL
filtered2 <- NULL
participant <- 1
test <- 1
## Create dynamic file names
filename_chest <- paste("/p", participant, "_", testname[test], "_CORE_torso_new_Algo", ".csv", sep = "")
filename_chest
## Create dynamic file names
filename_chest <- paste("/p", participant, "_", testname[test], "_core_torso_new_Algo", ".csv", sep = "")
filename_chest
## Create dynamic file names
filename_chest <- paste("/p", participant, "_", testname[test], "_core_torso_newAlgo", ".csv", sep = "")
filename_chest
## Create dynamic file names
filename_chest <- paste("/p", participant, "_", testname[test], "_core_torso_newAlgo", ".csv", sep = "")
filename_hand <- paste("/p", participant, "_", testname[test], "_core_hand_newAlgo", ".csv", sep = "")
filename_hand
file.exists(paste(here("data/CORE_rawdata_newAlgorithm/20241220_newnewnew/new_sports_chest_algorithm/"),
filename_chest, sep = ""))
### Download data + extract right columns
temp <- read.csv(paste(here("data/CORE_rawdata_newAlgorithm/20241220_newnewnew/new_sports_chest_algorithm/"),
filename_chest, sep = "")) %>%
rename(Date.time = "time..UTC.OFS..0100.",
T_core = "cbt..mC.",
T_core_new = "CBT_NEW_MODEL..mC.",
T_skin = "temp_a0..mC.",
HR = "hr") %>%
mutate(Date.time = sub("\\..*", "", Date.time))%>%                          # Delete unexpected ".11" etc
mutate(date = as.POSIXct(substr(Date.time, 1, 10), format = "%Y-%m-%d"),
time = as_hms(substr(Date.time, 12, 19))) %>%                        # Convert to useable timestamps
mutate(T_core_chest = T_core/1000,
T_core_chest_new = T_core_new/1000,
T_skin_chest = T_skin / 1000,
HR = as.numeric(HR)) %>%                                   # Convert to Tc
dplyr::select(time, T_core_chest, T_core_chest_new, T_skin_chest, HR)
### Download data + extract right columns
temp <- read.csv(paste(here("data/CORE_rawdata_newAlgorithm/20241220_newnewnew/new_sports_chest_algorithm/"),
filename_chest, sep = "")) %>%
rename(Date.time = "Timestamp",
T_core = "old_cbt",
T_core_new = "new_cbt",
T_skin = "skin_temp",
HR = "hr") %>%
mutate(Date.time = sub("\\..*", "", Date.time))%>%                          # Delete unexpected ".11" etc
mutate(date = as.POSIXct(substr(Date.time, 1, 10), format = "%Y-%m-%d"),
time = as_hms(substr(Date.time, 12, 19))) %>%                        # Convert to useable timestamps
mutate(T_core_chest = T_core,
T_core_chest_new = T_core_new,
T_skin_chest = T_skin,
HR = as.numeric(HR)) %>%                                   # Convert to Tc
dplyr::select(time, T_core_chest, T_core_chest_new, T_skin_chest, HR)
### Download data + extract right columns
temp <- read.csv(paste(here("data/CORE_rawdata_newAlgorithm/20241220_newnewnew/new_sports_chest_algorithm/"),
filename_chest, sep = "")) %>%
rename(Date.time = "Timestamp",
T_core = "old_cbt",
T_core_new = "new_cbt",
T_skin = "skin_temp",
HR = "heart_rate") %>%
mutate(Date.time = sub("\\..*", "", Date.time))%>%                          # Delete unexpected ".11" etc
mutate(date = as.POSIXct(substr(Date.time, 1, 10), format = "%Y-%m-%d"),
time = as_hms(substr(Date.time, 12, 19))) %>%                        # Convert to useable timestamps
mutate(T_core_chest = T_core,
T_core_chest_new = T_core_new,
T_skin_chest = T_skin,
HR = as.numeric(HR)) %>%                                   # Convert to Tc
dplyr::select(time, T_core_chest, T_core_chest_new, T_skin_chest, HR)
View(temp)
plot(temp$T_skin_chest)
plot(temp$T_core_chest_new)
plot(temp$T_core_chest)
### Filter only needed rows by start/ end times
times <- scoreform_HA[scoreform_HA$pp == participant & scoreform_HA$nmbr_test == test,] %>%
mutate(time_start_45 = as_hms(substr(time_start_45, 12, 19)),
time_end_ch = as_hms(substr(time_end_ch, 12, 19))) %>%
dplyr::select(pp, nmbr_test, time_start_45, time_end_ch)
times
filtered <- temp %>%
filter(time >= times$time_start_45 & time <= times$time_end_ch)
plot(filtered$T_core_chest_new)
### average over 1 minute
averaged_chest <- filtered %>%
mutate(timestamp = as_hms(round(as.numeric(time) / 60) * 60))%>%              # Get times towards closes minutes
group_by(timestamp) %>%
summarise(across(c(T_core_chest, T_core_chest_new, T_skin_chest, HR), mean, na.rm = TRUE)) %>%            # Calculate mean for each minute
ungroup() %>%
mutate(Minutes = as.numeric((timestamp - timestamp[1])/60),
HR = round(HR)) %>%
dplyr::select(Minutes, timestamp, T_core_chest, T_core_chest_new, T_skin_chest, HR)
plot(averaged_chest$Minutes, averaged_chest$T_core_chest_new)
file.exists(paste(here("data/CORE_rawdata_newAlgorithm/20241220_newnewnew/new_sports_chest_algorithm/"),
filename_hand, sep = ""))
filename_hand
test <- 2
filename_hand <- paste("/p", participant, "_", testname[test], "_core_hand_newAlgo", ".csv", sep = "")
file.exists(paste(here("data/CORE_rawdata_newAlgorithm/20241220_newnewnew/new_sports_chest_algorithm/"),
filename_hand, sep = ""))
### Download data + extract right columns
temp2 <- read.csv(paste(here("data/CORE_rawdata_newAlgorithm/20241220_newnewnew/new_sports_chest_algorithm/"),
filename_hand, sep = "")) %>%
rename(Date.time = "Timestamp",
T_core = "old_cbt",
T_core_new = "new_cbt",
T_skin = "skin_temp",
HR = "heart_rate") %>%
mutate(Date.time = sub("\\..*", "", Date.time))%>%                          # Delete unexpected ".11" etc
mutate(date = as.POSIXct(substr(Date.time, 1, 10), format = "%Y-%m-%d"),
time = as_hms(substr(Date.time, 12, 19))) %>%                        # Convert to useable timestamps
mutate(T_core_hand = T_core,
T_core_hand_new = T_core_new,
T_skin_hand = T_skin,
HR = as.numeric(HR)) %>%                                   # Convert to Tc
dplyr::select(time, T_core_hand, T_core_hand_new, T_skin_hand, HR)
### Filter only needed rows by start/ end times
times2 <- scoreform_HA[scoreform_HA$pp == participant & scoreform_HA$nmbr_test == test,] %>%
mutate(time_start_45 = as_hms(substr(time_start_45, 12, 19)),
time_end_ch = as_hms(substr(time_end_ch, 12, 19))) %>%
dplyr::select(pp, nmbr_test, time_start_45, time_end_ch)
filtered2 <- temp2%>%
filter(time >= times2$time_start_45 & time <= times2$time_end_ch)
### average over 1 minute
averaged_hand <- filtered2 %>%
mutate(timestamp = as_hms(round(as.numeric(time) / 60) * 60))%>%              # Get times towards closes minutes
group_by(timestamp) %>%
summarise(across(c(T_core_hand, T_core_hand_new, T_skin_hand), mean, na.rm = TRUE)) %>%            # Calculate mean for each minute
ungroup() %>%
mutate(Minutes = as.numeric((timestamp - timestamp[1])/60)) %>%
dplyr::select(Minutes, timestamp, T_core_hand, T_core_hand_new, T_skin_hand)
plot(averaged_hand$Minutes, averaged_hand$T_core_hand_new)
## Combine Hand and Chest
averaged_CORE <- averaged_chest %>%
left_join(averaged_hand, by = "Minutes") %>%
mutate(pp = participant,
ha = test,
HR_core = HR,
timestamp = timestamp.x) %>%
dplyr::select(pp, ha, Minutes, timestamp, T_core_chest, T_core_chest_new, T_skin_chest,
T_core_hand, T_core_hand_new, T_skin_hand, HR_core)
averaged_CORE
plot(averaged_CORE$Minutes, averaged_CORE$HR_core)
# Step 2: create empty longformat ----
longformat_CORE <- data.frame()
# Step 3: add each file to longformat_CORE ----
pp_value <- c(1:25)
testname <- c("ha1", "ha2", "ha3", "ha4", "ha5", "ha6", "ha7", "ha8", "ha9")
for (participant in pp_value) {
for (test in 1:NROW(testname)){
## Empty dataframes to be sure
averaged_hand <- NULL
averaged_chest <- NULL
averaged_CORE <- NULL
temp <- NULL
temp2 <- NULL
filtered <- NULL
filtered2 <- NULL
## Create dynamic file names
filename_chest <- paste("/p", participant, "_", testname[test], "_core_torso_newAlgo", ".csv", sep = "")
filename_hand <- paste("/p", participant, "_", testname[test], "_core_hand_newAlgo", ".csv", sep = "")
## CHEST: Check if file exists & do all subsetting
if(file.exists(paste(here("data/CORE_rawdata_newAlgorithm/20241220_newnewnew/new_sports_chest_algorithm/"),
filename_chest, sep = ""))) {
### Download data + extract right columns
temp <- read.csv(paste(here("data/CORE_rawdata_newAlgorithm/20241220_newnewnew/new_sports_chest_algorithm/"),
filename_chest, sep = "")) %>%
rename(Date.time = "Timestamp",
T_core = "old_cbt",
T_core_new = "new_cbt",
T_skin = "skin_temp",
HR = "heart_rate") %>%
mutate(Date.time = sub("\\..*", "", Date.time))%>%                          # Delete unexpected ".11" etc
mutate(date = as.POSIXct(substr(Date.time, 1, 10), format = "%Y-%m-%d"),
time = as_hms(substr(Date.time, 12, 19))) %>%                        # Convert to useable timestamps
mutate(T_core_chest = T_core,
T_core_chest_new = T_core_new,
T_skin_chest = T_skin,
HR = as.numeric(HR)) %>%                                   # Convert to Tc
dplyr::select(time, T_core_chest, T_core_chest_new, T_skin_chest, HR)
### Filter only needed rows by start/ end times
times <- scoreform_HA[scoreform_HA$pp == participant & scoreform_HA$nmbr_test == test,] %>%
mutate(time_start_45 = as_hms(substr(time_start_45, 12, 19)),
time_end_ch = as_hms(substr(time_end_ch, 12, 19))) %>%
dplyr::select(pp, nmbr_test, time_start_45, time_end_ch)
filtered <- temp %>%
filter(time >= times$time_start_45 & time <= times$time_end_ch)
### average over 1 minute
averaged_chest <- filtered %>%
mutate(timestamp = as_hms(round(as.numeric(time) / 60) * 60))%>%              # Get times towards closes minutes
group_by(timestamp) %>%
summarise(across(c(T_core_chest, T_core_chest_new, T_skin_chest, HR), mean, na.rm = TRUE)) %>%            # Calculate mean for each minute
ungroup() %>%
mutate(Minutes = as.numeric((timestamp - timestamp[1])/60),
HR = round(HR)) %>%
dplyr::select(Minutes, timestamp, T_core_chest, T_core_chest_new, T_skin_chest, HR)
} else {
### If file does not exist, create an empty dataframe
averaged_chest <- data.frame(Minutes = c(1:166), timestamp = rep(NA, 166), T_core_chest = rep(NA, 166),
T_core_chest_new = rep(NA, 166), T_skin_chest = rep(NA, 166), HR = rep(NA, 166))
}
## HAND: Check if file exists & do all subsetting
if(file.exists(paste(here("data/CORE_rawdata_newAlgorithm/20241220_newnewnew/new_sports_chest_algorithm/"),
filename_hand, sep = ""))) {
### Download data + extract right columns
temp2 <- read.csv(paste(here("data/CORE_rawdata_newAlgorithm/20241220_newnewnew/new_sports_chest_algorithm/"),
filename_hand, sep = "")) %>%
rename(Date.time = "Timestamp",
T_core = "old_cbt",
T_core_new = "new_cbt",
T_skin = "skin_temp",
HR = "heart_rate") %>%
mutate(Date.time = sub("\\..*", "", Date.time))%>%                          # Delete unexpected ".11" etc
mutate(date = as.POSIXct(substr(Date.time, 1, 10), format = "%Y-%m-%d"),
time = as_hms(substr(Date.time, 12, 19))) %>%                        # Convert to useable timestamps
mutate(T_core_hand = T_core,
T_core_hand_new = T_core_new,
T_skin_hand = T_skin,
HR = as.numeric(HR)) %>%                                   # Convert to Tc
dplyr::select(time, T_core_hand, T_core_hand_new, T_skin_hand, HR)
### Filter only needed rows by start/ end times
times2 <- scoreform_HA[scoreform_HA$pp == participant & scoreform_HA$nmbr_test == test,] %>%
mutate(time_start_45 = as_hms(substr(time_start_45, 12, 19)),
time_end_ch = as_hms(substr(time_end_ch, 12, 19))) %>%
dplyr::select(pp, nmbr_test, time_start_45, time_end_ch)
filtered2 <- temp2%>%
filter(time >= times2$time_start_45 & time <= times2$time_end_ch)
### average over 1 minute
averaged_hand <- filtered2 %>%
mutate(timestamp = as_hms(round(as.numeric(time) / 60) * 60))%>%              # Get times towards closes minutes
group_by(timestamp) %>%
summarise(across(c(T_core_hand, T_core_hand_new, T_skin_hand), mean, na.rm = TRUE)) %>%            # Calculate mean for each minute
ungroup() %>%
mutate(Minutes = as.numeric((timestamp - timestamp[1])/60)) %>%
dplyr::select(Minutes, timestamp, T_core_hand, T_core_hand_new, T_skin_hand)
} else {
### If file does not exist, create an empty dataframe
averaged_hand <- data.frame(Minutes = c(1:166), timestamp = rep(NA, 166), T_core_hand = rep(NA, 166),
T_core_hand_new = rep(NA, 166), T_skin_hand = rep(NA, 166))
}
## Combine Hand and Chest
averaged_CORE <- averaged_chest %>%
left_join(averaged_hand, by = "Minutes") %>%
mutate(pp = participant,
ha = test,
HR_core = HR,
timestamp = timestamp.x) %>%
dplyr::select(pp, ha, Minutes, timestamp, T_core_chest, T_core_chest_new, T_skin_chest,
T_core_hand, T_core_hand_new, T_skin_hand, HR_core)
longformat_CORE <- rbind(longformat_CORE, averaged_CORE)
}
}
plot(longformat_CORE$Minutes, longformat_CORE$T_core_chest_new)
plot(longformat_CORE$Minutes, longformat_CORE$T_core_chest)
plot(longformat_CORE$Minutes, longformat_CORE$T_core_chest_new)
View(longformat_CORE)
# Step 4: save as excel----
write.xlsx(longformat_CORE,
file = file.path(paste0(here("data/data_output"),
"/HA_longformat_CORE_06012025.xlsx")))
# STEP 1) Get cleaned DL data -----
longformat_DL <- read_excel(paste0(here("data/data_output"), "/HA_longformat_DL.xlsx")) %>%
dplyr::select(!Time)
longformat_DL
# STEP 2) Get cleaned IB data ----
longformat_Tsk <- read_excel(paste0(here("data/data_output"), "/HA_longformat_Tsk.xlsx")) %>%
mutate(Minutes = Minutes -1) %>%                    # Reduce by 1 minute as this starts at t = 1 instead of t = 0
mutate(ha = hst) %>%
dplyr::select(!c(hst, Date.Time, time))
longformat_Tsk
# STEP 3) Get RAW CORE data ----
longformat_CORE <- read_excel(paste0(here("data/data_output"), "/HA_longformat_CORE_06012025.xlsx"))
longformat_Polar <- read_excel(paste0(here("data/data_output"), "/HA_longformat_HR.xlsx")) %>%
rename(HR_polar = HR)
longformat_Polar
# STEP 5) Merge all into 1 Masterfile----
Masterfile <- longformat_CORE %>%
left_join(longformat_Tsk, by = c("pp","ha", "Minutes")) %>%
left_join(longformat_DL, by = c("pp","ha", "Minutes")) %>%
left_join(longformat_Polar, by = c("pp","ha", "Minutes")) %>%
rename(Trec = mean_Trec,
RH = mean_RH_vaisalah,
Tdb = mean_T_vaisalah,
T_core_torso = T_core_chest,
T_core_torso_new = T_core_chest_new,
T_skin_torso = T_skin_chest)
# STEP 6) Calculate Tbody----
Masterfile <- Masterfile %>%
mutate(Tbody = 0.8 * Trec + 0.2 * Tsk_average,
Tbody_core_torso = 0.8 * T_core_torso + 0.2 * T_skin_torso,
Tbody_core_hand = 0.8 * T_core_hand + 0.2 * T_skin_hand,
Tbody_core_torso_new = 0.8 * T_core_torso_new + 0.2 * T_skin_torso,
Tbody_core_hand_new = 0.8 * T_core_hand_new + 0.2 * T_skin_hand)
plot(Masterfile$Minutes, Masterfile$Trec)
### Likely measurement error or deviation from first 45 minutes protocol
## p18_ha1_trec data lot of missing and abnormally high values (Trec > 40) exclude this session.
## p4_ha4_trec and other data, she was just sitting in chamber due to injury. Exclude this session. Later drop-out.
exclude <- data.frame(pp = c(3,18),
ha = c(4,1))
### No-show pp
noshows <- c(5, 6, 13, 22, 24)
Masterfile <- Masterfile %>%
mutate(HR_core = ifelse(HR_core < 40, NA,
ifelse(HR_core < 100 & Minutes >= 25 & Minutes <= 45, NA, HR_core)),
T_core_torso = ifelse(is.na(HR_core), NA, T_core_torso),
T_core_hand = ifelse(is.na(HR_core), NA, T_core_hand),
T_skin_torso = ifelse(is.na(HR_core), NA, T_skin_torso),
T_skin_hand = ifelse(is.na(HR_core), NA, T_skin_hand)) %>%
filter(!pp %in% noshows) %>%  # Remove pp who did not show up at all
anti_join(exclude, by = c("pp", "ha"))  # Exclude sessions which deviated from protocol
# STEp 8) save masterfile ----
write.xlsx(Masterfile,
file = file.path(paste0(here("data/data_output"),
"/HA_Masterfile_raw_06012025.xlsx")))
